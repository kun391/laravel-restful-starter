<?xml version="1.0"?>
<ruleset name="Youlook API Coding Standard">

    <description>Youlook API coding standard</description>

    <exclude-pattern>*/tests/*</exclude-pattern>
    <exclude-pattern>*/data/*</exclude-pattern>

    <rule ref="PEAR">
        <!-- We do not care too much about method, class and file documentation,
            but having @author, @copyright and @license tags would be nice.
            The following configuration does not check for these tags, but
            complains if the file doc block is missing completely. -->
       <exclude name="PEAR.Commenting.FileComment" />
       <exclude name="PEAR.Commenting.ClassComment.MissingTag" />
       <exclude name="PEAR.Commenting.ClassComment" />
       <exclude name="PEAR.Commenting.FunctionComment.MissingTag" />
       <!--exclude name="PEAR.Commenting.FunctionComment" />
       <exclude name="PEAR.Commenting.FileComment.MissingTag" />
       <exclude name="PEAR.Commenting.FileComment.MissingVersion" />
       <exclude name="PEAR.Commenting.FileComment.SpacingBeforeTags" /-->
    </rule>

    <!-- Include some additional sniffs from the Generic standard -->
    <rule ref="Generic.PHP.DisallowShortOpenTag"/>

    <!-- Use Unix newlines -->
    <rule ref="Generic.Files.LineEndings">
        <exclude name="Generic.Files.LineEndings" />
        <!--properties>
            <property name="eolChar" value="\n"/>
        </properties-->
    </rule>


    <!--rule ref="/home/username/standards/mystandard"/-->

    <!--rule ref="/home/username/standards/custom.xml"/-->

    <!--rule ref="Squiz">
        <exclude name="Squiz.PHP.CommentedOutCode"/>
    </rule-->

    <!--rule ref="Generic.CodeAnalysis.UnusedFunctionParameter"/-->
    <!--rule ref="Generic.Commenting.Todo"/-->
    <rule ref="Generic.ControlStructures.InlineControlStructure"/>

    <!--rule ref="Generic.Commenting.Todo.CommentFound">
        <message>Please review this TODO comment: %s</message>
        <severity>3</severity>
    </rule-->

    <!--rule ref="Generic.Files.LineLength.MaxExceeded">
        <message>Line contains %s chars, which is longer than the max limit of %s</message>
    </rule-->
    <!--rule ref="Generic.Files.LineLength.TooLong">
        <message>Line longer than %s characters; contains %s characters</message>
    </rule-->

    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="lineLimit" value="200"/>
            <property name="absoluteLineLimit" value="255"/>
        </properties>
    </rule>

    <!--rule ref="Generic.Files.LineEndings">
        <properties>
            <property name="eolChar" value="\r\n"/>
        </properties>
    </rule-->

    <!--rule ref="Generic.Formatting.MultipleStatementAlignment">
        <properties>
            <property name="maxPadding" value="8"/>
            <property name="ignoreMultiLine" value="true"/>
            <property name="error" value="true"/>
        </properties>
    </rule-->

    <!--rule ref="Squiz.Strings.DoubleQuoteUsage.ContainsVar">
        <severity>0</severity>
    </rule-->

    <rule ref="Internal.NoCodeFound">
        <severity>0</severity>
    </rule>

    <!--rule ref="Squiz.Strings.DoubleQuoteUsage">
        <exclude-pattern>*/tests/*</exclude-pattern>
        <exclude-pattern>*/data/*</exclude-pattern>
    </rule-->

    <!--rule ref="Squiz.Strings.DoubleQuoteUsage.ContainsVar">
        <exclude-pattern>*/tests/*</exclude-pattern>
        <exclude-pattern>*/data/*</exclude-pattern>
    </rule-->

</ruleset>